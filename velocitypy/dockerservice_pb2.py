# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dockerservice.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='dockerservice.proto',
  package='dockerservice',
  syntax='proto3',
  serialized_pb=_b('\n\x13\x64ockerservice.proto\x12\rdockerservice\")\n\x19GetNextAvailiblePortReply\x12\x0c\n\x04port\x18\x01 \x01(\t\"2\n\x1bGetNextAvailiblePortRequest\x12\x13\n\x0bservicename\x18\x01 \x01(\t\"/\n\x19GetServiceContainersReply\x12\x12\n\ncontainers\x18\x01 \x03(\t\"2\n\x1bGetServiceContainersRequest\x12\x13\n\x0bservicename\x18\x01 \x01(\t\"A\n\x18\x43reateDockerImageRequest\x12\x12\n\nzipmodelid\x18\x01 \x01(\t\x12\x11\n\timagename\x18\x02 \x01(\t\"@\n\x16\x43reateDockerImageReply\x12\x12\n\nzipmodelid\x18\x01 \x01(\t\x12\x12\n\ntrainingid\x18\x02 \x01(\t\"<\n\x12GetServicesRequest\x12\x13\n\x0b\x61nnotations\x18\x01 \x01(\t\x12\x11\n\timagename\x18\x02 \x01(\t\":\n\x10GetServicesReply\x12\x12\n\nzipmodelid\x18\x01 \x01(\t\x12\x12\n\ntrainingid\x18\x02 \x01(\t\"-\n\x16GetServicePortsRequest\x12\x13\n\x0bservicename\x18\x01 \x01(\t\"%\n\x15GetServicesPortsReply\x12\x0c\n\x04port\x18\x01 \x01(\t2\x86\x04\n\x06\x44ocker\x12S\n\x0bGetServices\x12!.dockerservice.GetServicesRequest\x1a\x1f.dockerservice.GetServicesReply\"\x00\x12`\n\x0fGetServicePorts\x12%.dockerservice.GetServicePortsRequest\x1a$.dockerservice.GetServicesPortsReply\"\x00\x12\x65\n\x11\x43reateDockerImage\x12\'.dockerservice.CreateDockerImageRequest\x1a%.dockerservice.CreateDockerImageReply\"\x00\x12n\n\x14GetServiceContainers\x12*.dockerservice.GetServiceContainersRequest\x1a(.dockerservice.GetServiceContainersReply\"\x00\x12n\n\x14GetNextAvailiblePort\x12*.dockerservice.GetNextAvailiblePortRequest\x1a(.dockerservice.GetNextAvailiblePortReply\"\x00\x42\x36\n\x1bio.grpc.examples.helloworldB\x0fHelloWorldProtoP\x01\xa2\x02\x03HLWb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_GETNEXTAVAILIBLEPORTREPLY = _descriptor.Descriptor(
  name='GetNextAvailiblePortReply',
  full_name='dockerservice.GetNextAvailiblePortReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='port', full_name='dockerservice.GetNextAvailiblePortReply.port', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=38,
  serialized_end=79,
)


_GETNEXTAVAILIBLEPORTREQUEST = _descriptor.Descriptor(
  name='GetNextAvailiblePortRequest',
  full_name='dockerservice.GetNextAvailiblePortRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='servicename', full_name='dockerservice.GetNextAvailiblePortRequest.servicename', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=81,
  serialized_end=131,
)


_GETSERVICECONTAINERSREPLY = _descriptor.Descriptor(
  name='GetServiceContainersReply',
  full_name='dockerservice.GetServiceContainersReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='containers', full_name='dockerservice.GetServiceContainersReply.containers', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=133,
  serialized_end=180,
)


_GETSERVICECONTAINERSREQUEST = _descriptor.Descriptor(
  name='GetServiceContainersRequest',
  full_name='dockerservice.GetServiceContainersRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='servicename', full_name='dockerservice.GetServiceContainersRequest.servicename', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=182,
  serialized_end=232,
)


_CREATEDOCKERIMAGEREQUEST = _descriptor.Descriptor(
  name='CreateDockerImageRequest',
  full_name='dockerservice.CreateDockerImageRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='zipmodelid', full_name='dockerservice.CreateDockerImageRequest.zipmodelid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='imagename', full_name='dockerservice.CreateDockerImageRequest.imagename', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=234,
  serialized_end=299,
)


_CREATEDOCKERIMAGEREPLY = _descriptor.Descriptor(
  name='CreateDockerImageReply',
  full_name='dockerservice.CreateDockerImageReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='zipmodelid', full_name='dockerservice.CreateDockerImageReply.zipmodelid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='trainingid', full_name='dockerservice.CreateDockerImageReply.trainingid', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=301,
  serialized_end=365,
)


_GETSERVICESREQUEST = _descriptor.Descriptor(
  name='GetServicesRequest',
  full_name='dockerservice.GetServicesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='annotations', full_name='dockerservice.GetServicesRequest.annotations', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='imagename', full_name='dockerservice.GetServicesRequest.imagename', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=367,
  serialized_end=427,
)


_GETSERVICESREPLY = _descriptor.Descriptor(
  name='GetServicesReply',
  full_name='dockerservice.GetServicesReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='zipmodelid', full_name='dockerservice.GetServicesReply.zipmodelid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='trainingid', full_name='dockerservice.GetServicesReply.trainingid', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=429,
  serialized_end=487,
)


_GETSERVICEPORTSREQUEST = _descriptor.Descriptor(
  name='GetServicePortsRequest',
  full_name='dockerservice.GetServicePortsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='servicename', full_name='dockerservice.GetServicePortsRequest.servicename', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=489,
  serialized_end=534,
)


_GETSERVICESPORTSREPLY = _descriptor.Descriptor(
  name='GetServicesPortsReply',
  full_name='dockerservice.GetServicesPortsReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='port', full_name='dockerservice.GetServicesPortsReply.port', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=536,
  serialized_end=573,
)

DESCRIPTOR.message_types_by_name['GetNextAvailiblePortReply'] = _GETNEXTAVAILIBLEPORTREPLY
DESCRIPTOR.message_types_by_name['GetNextAvailiblePortRequest'] = _GETNEXTAVAILIBLEPORTREQUEST
DESCRIPTOR.message_types_by_name['GetServiceContainersReply'] = _GETSERVICECONTAINERSREPLY
DESCRIPTOR.message_types_by_name['GetServiceContainersRequest'] = _GETSERVICECONTAINERSREQUEST
DESCRIPTOR.message_types_by_name['CreateDockerImageRequest'] = _CREATEDOCKERIMAGEREQUEST
DESCRIPTOR.message_types_by_name['CreateDockerImageReply'] = _CREATEDOCKERIMAGEREPLY
DESCRIPTOR.message_types_by_name['GetServicesRequest'] = _GETSERVICESREQUEST
DESCRIPTOR.message_types_by_name['GetServicesReply'] = _GETSERVICESREPLY
DESCRIPTOR.message_types_by_name['GetServicePortsRequest'] = _GETSERVICEPORTSREQUEST
DESCRIPTOR.message_types_by_name['GetServicesPortsReply'] = _GETSERVICESPORTSREPLY

GetNextAvailiblePortReply = _reflection.GeneratedProtocolMessageType('GetNextAvailiblePortReply', (_message.Message,), dict(
  DESCRIPTOR = _GETNEXTAVAILIBLEPORTREPLY,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.GetNextAvailiblePortReply)
  ))
_sym_db.RegisterMessage(GetNextAvailiblePortReply)

GetNextAvailiblePortRequest = _reflection.GeneratedProtocolMessageType('GetNextAvailiblePortRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETNEXTAVAILIBLEPORTREQUEST,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.GetNextAvailiblePortRequest)
  ))
_sym_db.RegisterMessage(GetNextAvailiblePortRequest)

GetServiceContainersReply = _reflection.GeneratedProtocolMessageType('GetServiceContainersReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICECONTAINERSREPLY,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.GetServiceContainersReply)
  ))
_sym_db.RegisterMessage(GetServiceContainersReply)

GetServiceContainersRequest = _reflection.GeneratedProtocolMessageType('GetServiceContainersRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICECONTAINERSREQUEST,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.GetServiceContainersRequest)
  ))
_sym_db.RegisterMessage(GetServiceContainersRequest)

CreateDockerImageRequest = _reflection.GeneratedProtocolMessageType('CreateDockerImageRequest', (_message.Message,), dict(
  DESCRIPTOR = _CREATEDOCKERIMAGEREQUEST,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.CreateDockerImageRequest)
  ))
_sym_db.RegisterMessage(CreateDockerImageRequest)

CreateDockerImageReply = _reflection.GeneratedProtocolMessageType('CreateDockerImageReply', (_message.Message,), dict(
  DESCRIPTOR = _CREATEDOCKERIMAGEREPLY,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.CreateDockerImageReply)
  ))
_sym_db.RegisterMessage(CreateDockerImageReply)

GetServicesRequest = _reflection.GeneratedProtocolMessageType('GetServicesRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICESREQUEST,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.GetServicesRequest)
  ))
_sym_db.RegisterMessage(GetServicesRequest)

GetServicesReply = _reflection.GeneratedProtocolMessageType('GetServicesReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICESREPLY,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.GetServicesReply)
  ))
_sym_db.RegisterMessage(GetServicesReply)

GetServicePortsRequest = _reflection.GeneratedProtocolMessageType('GetServicePortsRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICEPORTSREQUEST,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.GetServicePortsRequest)
  ))
_sym_db.RegisterMessage(GetServicePortsRequest)

GetServicesPortsReply = _reflection.GeneratedProtocolMessageType('GetServicesPortsReply', (_message.Message,), dict(
  DESCRIPTOR = _GETSERVICESPORTSREPLY,
  __module__ = 'dockerservice_pb2'
  # @@protoc_insertion_point(class_scope:dockerservice.GetServicesPortsReply)
  ))
_sym_db.RegisterMessage(GetServicesPortsReply)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\033io.grpc.examples.helloworldB\017HelloWorldProtoP\001\242\002\003HLW'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class DockerStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.GetServices = channel.unary_unary(
          '/dockerservice.Docker/GetServices',
          request_serializer=GetServicesRequest.SerializeToString,
          response_deserializer=GetServicesReply.FromString,
          )
      self.GetServicePorts = channel.unary_unary(
          '/dockerservice.Docker/GetServicePorts',
          request_serializer=GetServicePortsRequest.SerializeToString,
          response_deserializer=GetServicesPortsReply.FromString,
          )
      self.CreateDockerImage = channel.unary_unary(
          '/dockerservice.Docker/CreateDockerImage',
          request_serializer=CreateDockerImageRequest.SerializeToString,
          response_deserializer=CreateDockerImageReply.FromString,
          )
      self.GetServiceContainers = channel.unary_unary(
          '/dockerservice.Docker/GetServiceContainers',
          request_serializer=GetServiceContainersRequest.SerializeToString,
          response_deserializer=GetServiceContainersReply.FromString,
          )
      self.GetNextAvailiblePort = channel.unary_unary(
          '/dockerservice.Docker/GetNextAvailiblePort',
          request_serializer=GetNextAvailiblePortRequest.SerializeToString,
          response_deserializer=GetNextAvailiblePortReply.FromString,
          )


  class DockerServicer(object):

    def GetServices(self, request, context):
      """Sends a greeting
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetServicePorts(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def CreateDockerImage(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetServiceContainers(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def GetNextAvailiblePort(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DockerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetServices': grpc.unary_unary_rpc_method_handler(
            servicer.GetServices,
            request_deserializer=GetServicesRequest.FromString,
            response_serializer=GetServicesReply.SerializeToString,
        ),
        'GetServicePorts': grpc.unary_unary_rpc_method_handler(
            servicer.GetServicePorts,
            request_deserializer=GetServicePortsRequest.FromString,
            response_serializer=GetServicesPortsReply.SerializeToString,
        ),
        'CreateDockerImage': grpc.unary_unary_rpc_method_handler(
            servicer.CreateDockerImage,
            request_deserializer=CreateDockerImageRequest.FromString,
            response_serializer=CreateDockerImageReply.SerializeToString,
        ),
        'GetServiceContainers': grpc.unary_unary_rpc_method_handler(
            servicer.GetServiceContainers,
            request_deserializer=GetServiceContainersRequest.FromString,
            response_serializer=GetServiceContainersReply.SerializeToString,
        ),
        'GetNextAvailiblePort': grpc.unary_unary_rpc_method_handler(
            servicer.GetNextAvailiblePort,
            request_deserializer=GetNextAvailiblePortRequest.FromString,
            response_serializer=GetNextAvailiblePortReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'dockerservice.Docker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaDockerServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetServices(self, request, context):
      """Sends a greeting
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetServicePorts(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def CreateDockerImage(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetServiceContainers(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def GetNextAvailiblePort(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDockerStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def GetServices(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Sends a greeting
      """
      raise NotImplementedError()
    GetServices.future = None
    def GetServicePorts(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetServicePorts.future = None
    def CreateDockerImage(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    CreateDockerImage.future = None
    def GetServiceContainers(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetServiceContainers.future = None
    def GetNextAvailiblePort(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    GetNextAvailiblePort.future = None


  def beta_create_Docker_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('dockerservice.Docker', 'CreateDockerImage'): CreateDockerImageRequest.FromString,
      ('dockerservice.Docker', 'GetNextAvailiblePort'): GetNextAvailiblePortRequest.FromString,
      ('dockerservice.Docker', 'GetServiceContainers'): GetServiceContainersRequest.FromString,
      ('dockerservice.Docker', 'GetServicePorts'): GetServicePortsRequest.FromString,
      ('dockerservice.Docker', 'GetServices'): GetServicesRequest.FromString,
    }
    response_serializers = {
      ('dockerservice.Docker', 'CreateDockerImage'): CreateDockerImageReply.SerializeToString,
      ('dockerservice.Docker', 'GetNextAvailiblePort'): GetNextAvailiblePortReply.SerializeToString,
      ('dockerservice.Docker', 'GetServiceContainers'): GetServiceContainersReply.SerializeToString,
      ('dockerservice.Docker', 'GetServicePorts'): GetServicesPortsReply.SerializeToString,
      ('dockerservice.Docker', 'GetServices'): GetServicesReply.SerializeToString,
    }
    method_implementations = {
      ('dockerservice.Docker', 'CreateDockerImage'): face_utilities.unary_unary_inline(servicer.CreateDockerImage),
      ('dockerservice.Docker', 'GetNextAvailiblePort'): face_utilities.unary_unary_inline(servicer.GetNextAvailiblePort),
      ('dockerservice.Docker', 'GetServiceContainers'): face_utilities.unary_unary_inline(servicer.GetServiceContainers),
      ('dockerservice.Docker', 'GetServicePorts'): face_utilities.unary_unary_inline(servicer.GetServicePorts),
      ('dockerservice.Docker', 'GetServices'): face_utilities.unary_unary_inline(servicer.GetServices),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Docker_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('dockerservice.Docker', 'CreateDockerImage'): CreateDockerImageRequest.SerializeToString,
      ('dockerservice.Docker', 'GetNextAvailiblePort'): GetNextAvailiblePortRequest.SerializeToString,
      ('dockerservice.Docker', 'GetServiceContainers'): GetServiceContainersRequest.SerializeToString,
      ('dockerservice.Docker', 'GetServicePorts'): GetServicePortsRequest.SerializeToString,
      ('dockerservice.Docker', 'GetServices'): GetServicesRequest.SerializeToString,
    }
    response_deserializers = {
      ('dockerservice.Docker', 'CreateDockerImage'): CreateDockerImageReply.FromString,
      ('dockerservice.Docker', 'GetNextAvailiblePort'): GetNextAvailiblePortReply.FromString,
      ('dockerservice.Docker', 'GetServiceContainers'): GetServiceContainersReply.FromString,
      ('dockerservice.Docker', 'GetServicePorts'): GetServicesPortsReply.FromString,
      ('dockerservice.Docker', 'GetServices'): GetServicesReply.FromString,
    }
    cardinalities = {
      'CreateDockerImage': cardinality.Cardinality.UNARY_UNARY,
      'GetNextAvailiblePort': cardinality.Cardinality.UNARY_UNARY,
      'GetServiceContainers': cardinality.Cardinality.UNARY_UNARY,
      'GetServicePorts': cardinality.Cardinality.UNARY_UNARY,
      'GetServices': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'dockerservice.Docker', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
